{"id":"controller/random/random.controller.js","dependencies":[{"name":"/Users/wolfzer44/www/vutiliti/package.json","includedInParent":true,"mtime":1584041049154},{"name":"../../utils/utils","loc":{"line":3,"column":23},"parent":"/Users/wolfzer44/www/vutiliti/src/controller/random/random.controller.js","resolved":"/Users/wolfzer44/www/vutiliti/src/utils/utils.js"},{"name":"../../models/Random","loc":{"line":4,"column":19},"parent":"/Users/wolfzer44/www/vutiliti/src/controller/random/random.controller.js","resolved":"/Users/wolfzer44/www/vutiliti/src/models/Random.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.store = exports.index = void 0;\n\nvar _moment = _interopRequireDefault(require(\"moment\"));\n\nvar _sequelize = _interopRequireDefault(require(\"sequelize\"));\n\nvar utils = _interopRequireWildcard(require(\"../../utils/utils\"));\n\nvar _Random = _interopRequireDefault(require(\"../../models/Random\"));\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst index = async (req, res) => {\n  const response = await _Random.default.findAll({\n    group: ['Random.id', 'random_values.id'],\n    include: {\n      association: 'random_values',\n      attributes: []\n    },\n    attributes: ['id', [_sequelize.default.fn('AVG', _sequelize.default.col('random_values.value')), 'average']]\n  });\n  return res.status(200).json(response);\n};\n\nexports.index = index;\n\nconst store = async (req, res) => {\n  const {\n    start,\n    end\n  } = req.body;\n  const {\n    userid\n  } = req.headers;\n  const startTime = (0, _moment.default)(new Date(start));\n  const endTime = (0, _moment.default)(new Date(end));\n  const diffTime = endTime.diff(startTime, 'milliseconds');\n\n  if (utils.formatDate(start) < utils.formatDate(new Date())) {\n    return res.status(400).json({\n      message: 'Invalid date!'\n    });\n  }\n\n  if (utils.formatDate(start) === utils.formatDate(new Date())) {\n    const response = await _Random.default.create({\n      start_time: startTime,\n      end_time: endTime,\n      user_id: userid\n    });\n    utils.createTimer(response.id, diffTime);\n    return res.status(200).json({\n      message: 'Random created!'\n    });\n  } else {\n    const response = await _Random.default.create({\n      start_time: start,\n      end_time: end,\n      user_id: userid\n    });\n    return res.status(200).json({\n      data: response,\n      message: `Random schedule ${endTime}!`\n    });\n  }\n};\n\nexports.store = store;"},"sourceMaps":null,"error":null,"hash":"43b86b767b3c1afa030cf9d0741a2382","cacheData":{"env":{}}}